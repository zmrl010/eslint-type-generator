import type { TSESLint } from "@typescript-eslint/utils";
import { mkdirp } from "mkdirp";
import path from "path";
import util from "util";
import { GeneratorContext, GeneratorOptions, setupContext } from "./context.js";
import { loadEslintPlugins, type Plugin } from "./find-plugins.js";
import { generateRuleTypeFiles } from "./generate-rule-type-files.js";
import { formatText, toPascalCase } from "./text-utils.js";

const debug = util.debuglog("generate-types");

/**
 * normalize function rule into object
 */
function normalizeRule(
  ruleCreator: TSESLint.RuleCreateFunction
): TSESLint.RuleModule<string> {
  return {
    defaultOptions: [],
    meta: {
      messages: {},
      schema: {},
      type: "suggestion",
    },
    create: ruleCreator,
  };
}

type RuleRecord = Record<string, TSESLint.RuleModule<string, unknown[]>>;

async function generatePluginIndexFile(
  context: GeneratorContext,
  plugin: Plugin,
  rules: RuleRecord
) {
  const ruleNames = Object.keys(rules).map((ruleName) => ({
    name: ruleName,
    safeName: toPascalCase(ruleName.replace(`${plugin.name}/`, "")),
  }));

  const rulePrefix = plugin.name === "eslint" ? "" : `${plugin.name}/`;

  const importStatements = ruleNames
    .map(
      (rule) =>
        `import type { ${rule.safeName} } from '../${plugin.name}/${rule.name}.js';`
    )
    .join("\n");

  const interfaceMembers = ruleNames
    .map((rule) => `'${rulePrefix}${rule.name}': ${rule.safeName};`)
    .join("\n");

  const textContent = `
  ${context.autoGeneratedNote}
  ${importStatements}

  /**
   * ${plugin.module} Rules
   */
  export interface ${toPascalCase(plugin.name)} {
    ${interfaceMembers}
  }
  `;

  context.write(
    path.resolve(context.target, plugin.name, "index.ts"),
    formatText(textContent)
  );

  debug("Wrote types for ", plugin.module);
}

async function processPlugin(context: GeneratorContext, plugin: Plugin) {
  debug(`processing plugin \`%s\``, plugin.module);

  if (!plugin.rules) {
    debug(`no rules found. skipping...`);
    return;
  }

  const rules: RuleRecord = {};
  for (const [ruleName, rule] of Object.entries(plugin.rules)) {
    if (typeof rule === "function") {
      rules[ruleName] = normalizeRule(rule);
    } else if (rule.meta.deprecated === true) {
      // skip deprecated rules
      continue;
    } else {
      rules[ruleName] = rule;
    }
  }

  const pluginDir = path.resolve(context.target, plugin.name);

  await mkdirp(pluginDir);

  await generateRuleTypeFiles(context, rules, pluginDir);

  await generatePluginIndexFile(context, plugin, rules);
}

export async function generateRuleTypes(
  options: GeneratorOptions
): Promise<void> {
  const context = setupContext(options);
  const plugins = loadEslintPlugins();

  for await (const plugin of plugins) {
    processPlugin(context, plugin);
  }

  console.info("Done!");
}
