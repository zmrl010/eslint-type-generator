import fs from "fs/promises";
import process from "process";
import { formatText } from "./text-utils.js";

const AUTO_GENERATED_NOTE = `
/**
 * THIS FILE IS AUTO-GENERATED.
 * DO NOT MODIFY IT MANUALLY.
 * RUN \`generate-types\` TO REGENERATE IT.
 */
`.trim();

/**
 * Generator object with references to configuration and functions
 */
export interface GeneratorConfig {
  /**
   * Target output directory to write type files
   *
   * @default "types/"
   */
  outDir: string;

  /**
   * Current working directory to start from
   *
   * @default process.cwd()
   */
  cwd: string;

  /**
   * Function to handle writing text to output (usually a file somewhere)
   *
   * @default node:fs.writeFile()
   */
  write: (path: string, text: string) => void | Promise<void>;

  /**
   * Function to format text
   *
   * @default prettier.format()
   */
  format: (text: string) => string;

  /**
   * Note prepended to generated files
   */
  autoGeneratedNote: string;
}

export type GeneratorOptions = Partial<GeneratorConfig>;

export type GeneratorContext = Readonly<
  {
    /**
     * Write formatted text to output
     */
    writeFormatted: (path: string, text: string) => Promise<void>;
  } & GeneratorConfig
>;

/**
 * Resolve input options into a complete context
 */
export function setupContext({
  cwd = process.cwd(),
  autoGeneratedNote = AUTO_GENERATED_NOTE,
  write = fs.writeFile,
  format = formatText,
  outDir = "types/",
}: GeneratorOptions): GeneratorContext {
  if (cwd !== process.cwd()) {
    process.chdir(cwd);
  }

  async function writeFormatted(path: string, text: string) {
    return write(path, format(`${autoGeneratedNote}\n${text}`));
  }

  return {
    cwd,
    autoGeneratedNote,
    write,
    writeFormatted,
    format,
    outDir,
  };
}
